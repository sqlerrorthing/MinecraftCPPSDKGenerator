package me.sqlerrorthing.generator.impl

import me.sqlerrorthing.Config
import me.sqlerrorthing.ast.IClass
import me.sqlerrorthing.generator.Generator
import org.apache.logging.log4j.LogManager
import org.apache.logging.log4j.Logger
import java.io.File


private const val BASE_HEADER_NAME = "sdk.hpp"
private const val JNI_INCLUDE = "#include <jni.h>"
private const val BASE_INCLUDE = "#include <sdk.hpp>"
private const val BASE_NAMESPACE = "MinecraftSDK"

private const val BASE_WARNING = """
            // WARNING: This code was automatically generated by MinecraftCppSDK.
            // It is highly recommended to not modify this file directly.
            // Any changes made to this file will be overwritten by the next generation. 
        """//.trimIndent()

private val logger: Logger = LogManager.getLogger(CPPGenerator::class.java)


operator fun File.div(other: String): File {
    return this.resolve(other)
}

object CPPGenerator : Generator {

    override fun generate(config: Config, parsed: List<IClass>) {
        logger.debug("Generating base.hpp")
        (config.outFolder / BASE_HEADER_NAME).writeText(generateBaseHeaderFile(parsed))

        parsed.forEach {
            try {
                logger.debug("Staring generating .h class ${it.name.normalName}")
                generateClass(config, it)
            } catch (e: Exception) {
                logger.error("Failed to generate class ${it.name.normalName}", e)
            }
        }
    }

    private fun generateClass(config: Config, `class`: IClass) {

        val dstFile = config.outFolder / (`class`.name.normalName + ".hpp")
        dstFile.parentFile.mkdirs()
        dstFile.createNewFile()

        val sb = StringBuilder()
        sb.append(BASE_WARNING.trimIndent())
        sb.appendLine()
        sb.appendLine()
        logger.debug("Insert warning msg into header file")

        val (definitionPre, definitionPost) = appendDefinitionHeaderName(`class`)
        sb.append(definitionPre)
        sb.appendLine()
        sb.appendLine(BASE_INCLUDE)
        sb.appendLine("using namespace ${BASE_NAMESPACE};")

        sb.appendLine()
        sb.appendLine()

        sb.append("""
            // Obfuscated: ${`class`.name.obfuscated}
            class ${`class`.name.original} {
            public:
                static jclass findSelf() {
                    return env->FindClass("${`class`.name.obfuscated }"); // ${`class`.name.dottedNormalName}
                };
        """.trimIndent())
        sb.appendLine()

        sb.appendLine()

        sb.appendLine("};")
        sb.appendLine()


        sb.append(definitionPost)
        dstFile.writeText(sb.toString())
    }


    private fun appendDefinitionHeaderName(`class`: IClass) = appendDefinitionHeaderName(`class`.name.underscoredNormalName)

    private fun appendDefinitionHeaderName(name: String): Pair<String, String> {
        return with("${name.uppercase()}_HPP") {
            """
            #ifndef $this
            #define $this
        """.trimIndent() to
        """
            #endif // $this
        """.trimIndent()
        }
    }

    private fun generateBaseHeaderFile(classes: List<IClass>): String {
        val (startDef, endDef) = appendDefinitionHeaderName("MINECRAFT_SDK_BASE")
        return """
            |${BASE_WARNING.trimIndent()}
            |
            |$startDef
            |
            |$JNI_INCLUDE
            |#define JNI_VERSION JNI_VERSION_1_6
            |
            |namespace $BASE_NAMESPACE {
            |
            |static JavaVM* vm {nullptr};
            |static JNIEnv* env {nullptr};
            |
            |static int InitializeSDK() {
            |    jsize count;
            |
            |    if (JNI_GetCreatedJavaVMs(&vm, 1, &count) != JNI_OK || count == 0) {
            |        return JNI_ERR;
            |    }
            |
            |    if (jint result = vm->GetEnv(reinterpret_cast<void **>(&env), JNI_VERSION); result == JNI_EDETACHED) {
            |      	if (result = vm->AttachCurrentThread(reinterpret_cast<void **>(&env), nullptr); result != JNI_OK) {
            |      	    return JNI_ERR;
            |      	}
            |    }
            |
            |    return JNI_OK;
            |}
            |
            |}
            |
            |$endDef
            |
            |// by sqlerrorthing with ❤️❤️❤️
        """.trimMargin()
    }
}