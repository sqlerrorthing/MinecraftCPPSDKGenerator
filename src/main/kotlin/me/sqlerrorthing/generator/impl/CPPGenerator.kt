package me.sqlerrorthing.generator.impl

import me.sqlerrorthing.Config
import me.sqlerrorthing.ast.IClass
import me.sqlerrorthing.ast.IField
import me.sqlerrorthing.generator.Generator
import org.apache.logging.log4j.LogManager
import org.apache.logging.log4j.Logger
import java.io.File

operator fun File.div(other: String): File {
    return this.resolve(other)
}

object CPPGenerator : Generator {

    @JvmStatic @JvmSynthetic
    private val logger: Logger = LogManager.getLogger(CPPGenerator::class.java)

    override fun generate(config: Config, parsed: List<IClass>) {
        parsed.forEach {
            try {
                logger.debug("Staring generating .h class ${it.name.yarn}")
                generateClass(config, it)
            } catch (e: Exception) {
                logger.error("Failed to generate class ${it.name.yarn}", e)
            }
        }
    }

    private fun generateClass(config: Config, `class`: IClass) {

        val dstFile = config.outFolder / (`class`.name.yarn.toString() + ".hpp")
        dstFile.parentFile.mkdirs()
        dstFile.createNewFile()

        val sb = StringBuilder()
        sb.append("""
            // WARNING: This code was automatically generated by MinecraftCppSDK.
            // It is highly recommended to not modify this file directly.
            // Any changes made to this file will be overwritten by the next generation. 
        """.trimIndent())
        sb.appendLine()
        sb.appendLine()
        logger.debug("Insert warning msg into header file")

        val (definitionPre, definitionPost) = appendDefinitionMacro(`class`)
        sb.append(definitionPre)

        sb.appendLine()
        sb.appendLine()

        sb.append("""
            // Obfuscated: ${`class`.name.obfuscated}
            namespace ${`class`.name.original} {
                jclass findSelf(JNIEnv* p_env) {
                    return p_env->FindClass("${`class`.name.obfuscated }"); // ${`class`.name.yarn!!.replace("/", ".")}
                }
        """.trimIndent())
        sb.appendLine()

        sb.appendLine()
        appendFields(sb, `class`)

        sb.appendLine("}")
        sb.appendLine()


        sb.append(definitionPost)
        dstFile.writeText(sb.toString())
    }

    private fun appendFields(sb: StringBuilder, `class`: IClass) {
        sb.appendLine("""
            |    // FIELDS [STATIC]_FIELD_[NAME] obfuscated
        """.trimMargin())
        `class`.fields.forEach {
            appendField(sb, `class`, it)
        }
    }

    private fun appendField(sb: StringBuilder, `class`: IClass, field: IField) {
        sb.appendLine("""
            |    #define ${if(field.static) "STATIC_" else ""}FIELD_${field.name.original} ${field.name.obfuscated}
        """.trimMargin())
    }

    private fun appendDefinitionMacro(`class`: IClass): Pair<String, String> {
        val name = (`class`.name.yarn!!
                .replace("/", "")
                + "_"
                + `class`.name.obfuscated).uppercase() + "_H"

        return """
            #ifndef $name
            #define $name
            
            #include <jni.h>
        """.trimIndent() to
        """
            #endif // $name
        """.trimIndent()
    }
}